/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 SIMPLE

*/

/* 
 * @Filename - FMenuBar.sim
 * @Author - Azeez Adewale
 * @Date - 14 March 2018
 * @Time - 05:16 AM
 *
 */

module fulltick.widget

#call the @Class FInput File for blocks inheritance
call "fulltick/core/FWidget.sim" ? fulltick.widget
callModule("dynamic_modules\string_savant\dist\Debug\MinGW-Windows\string_savant.dll")

#This @Class FMenuBar @Skip
#  ________________________________________________________
# |________________________________________________________|
#@EndSkip @Image FMenuBar
class FMenu : FWidget	

	/* TYPES */
	MENU_WIDGET_SELECTION_COLOR = new FColor #the default selection color unimportant
	
	/* INTEGER */
	MENU_WIDGET_DOWN_BOX_TYPE = 2 #declare the default down box type to be flat

	#Add a new menu item to the menu or a menu item itself this block 
	#this block takes both @DataType string and the @Class FMenuItem 
	#as parameter if a string is sent as parameter then the @Link Callback
	#can only be assigned using index on the menu but you when a 
	#@Class FMenuItem is sent as parameter then other fine tunning, 
	#properties and @Link Callback can be assigned to the the class
	#before been sent as parameter to this block.
	#Parameters can be sent as list or single object 
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the menu
	block addItem(menuitem)
		try 
			if isList(menuitem) 
				for a = 0 to lengthOf(menuitem)
					addSingleItem(menuitem[a])
				end
			else
				addSingleItem(menuitem)
			end
		catch 
			try 
				addSingleItem(menuitem) 
			catch 
				#addItemRaw(menuitem,null,null,null,null) 
				display __err__
			end
		end
		return this
		
	#@Deprecated
	#add a single menuitem this block does not accept @DataType List as
	#parameter but a single object to dynamically add object call the
	#@Block addItem(menuitem) instead 
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the menu
	block addSingleItemDepreciated(menuitem) 
		if (menuitem.isSubMenu()) 
			for a = 0 to lengthOf(menuitem.getItems())
				addItemRaw(menuitem.getItems()[a].getValue(),menuitem.getItems()[a].getShortcut(),menuitem.getItems()[a].getCallback(),menuitem.getItems()[a].getUserData(),menuitem.getItems()[a].getFlag())
			end
		else 
			addItemRaw(menuitem.getValue(),menuitem.getShortcut(),menuitem.getCallback(),menuitem.getUserData(),menuitem.getFlag())
		end
		return this
		
	#Add a list containing all the @Class FMenuItem(s) and the sub menus
	#the list can be just a list of one menu @Code
	#	menu = ["Menu","callback()",MENU_TYPE]
	#@EndCode
	#or it can be a hierarchy of @Class FMenuItem(s) and sub menus of 
	#unlimited size and limit so far it follows the rules e.g @Code
	#menu = [
	#		["File", 
	#			[["New", "new()",[
	#				["Project", "open()"],
	#				["Website", "open()"]]],
	#			["0pen", "open()"],
	#			["Save", "save()"],
	#			["Save As..", "saveAs()"]]			
	#		],
	#		["Search", 
	#			[["Find", "find()"],
	#			["Replace", "replace()"]]		
	#		],
	#		["Run", 
	#			[["Run", "runSource()"],
	#			["Debug", "debugSource()"]]		
	#		],
	#		["About", "about()"]
	#	]
	#@EndCode the summary of what happen above is that the main list ~menu~
	#contains four list **with index[0] the first list "File"  **. Supplying 
	#the menu above each of the list will be taken individually for example
	#the first list @Code
	#menu = [
	#		["File", 
	#			[["New", "new()",[
	#				["Project", "open()"],
	#				["Website", "open()"]]],
	#			["0pen", "open()"],
	#			["Save", "save()"],
	#			["Save As..", "saveAs()"]]			
	#		],..
	#	]
	#@EndCode the submenu File will be added to the menubar since the second
	#option is a list it regard it a a sub menu items which also have a list 
	#at index 2 which will be regarded as a submenu to the New which is a 
	#child menu of File so we have @Code
	#File --> New --> Project
	#			  --> Website
	#@EndCode check the example @Example menudemo.sim for more enlightenment
	block addMenu(menu) 
		subMenu = []
		for a = 0 to lengthOf(menu)  
			if (isList(menu[a]))  
				menuLevelOne = menu[a] menuItemLevelOne = new FMenuItem(menuLevelOne[0]) 
				if (containsChildMenus(menuLevelOne))
					subMenu = menuLevelOne[getSubmenuListIndex()] 
					addMenu(treatMenu(subMenu,menuItemLevelOne))
				else 
					if menuLevelOne[1] != "" || menuLevelOne[1] != 0 menuItemLevelOne.callback(menuLevelOne[1]) end
					try if menuLevelOne[2] != "" || menuLevelOne[2] != 0 menuItemLevelOne.setFlag(menuLevelOne[2]) end catch end
					addSingleItem(menuItemLevelOne)
				end
			else
				menuItemLevelOne = new FMenuItem(menu[0]) 
				if menu[1] != "" || menu[1] != 0 menuItemLevelOne.callback(menu[1]) end
				try if menu[2] != "" || menu[2] != 0 menuItemLevelOne.setFlag(menu[2]) end catch end
				addSingleItem(menuItemLevelOne)
			end
		end 
		notifyWidget()
		return this
		
	#Add a menu item to an instance of the @Class FMenu widget this is a
	#safe block as it notify the @FMenuItem widget to do all necessary 
	#treating if you want you can call the @block addItemRaw(value,flag)  
	#directly. This block accept @Class FMenuItem widget as a parameter
	#only any other @Link DATATYPE sent as param is an error
	block addSingleItem(menuitem) 
		addItemRaw(menuitem.getValue(),menuitem.getFlag())
		assignMenuItemPointer(menuitem)
		menuitem.cure()
		add(MENU_WIDGET_MENUITEMS_LIST,menuitem)
		return this
		
	#This is the main block that add item to the widget of @Class FMenuBar
	#instance. Use this block directly if you know what you are doing
	#@Hint using directly can be faster as no formating and treatments
	#is done i.e some safe block formating are skipped @EndHint
	#@Note it not safe use only if you know what you are doing
	block addItemRaw(value,flag) 
		__menu_add(WIDGETPOINTER,value,flag) 
		add(MENU_WIDGET_MENUITEMS_LIST_VALUE,value)
		notifyWidget()
		
	#clear the entire child @Class FWidget on the instance of the @Class
	#FMenu to and redraw the @Class Menu to completely remove all the child
	#widgets
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block clear()
		__menu_clear(WIDGETPOINTER,0,0)
		notifyWidget()
		return this
		
	#Remove the sub menu in the instance of the @Class FMenu at the 
	#provided index
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block clearSubmenuAt(index)
		__menu_clear(WIDGETPOINTER,1,index)
		notifyWidget() 
		return this
		
	#change the color of the menu when it is selected the default been 
	#colorless the color parameter can be an instance of the @Class FColor 
	#or an integer value of the color 
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setSelectionColor(color)
		try {
			color.getColor() MENU_WIDGET_SELECTION_COLOR = color
		catch
			MENU_WIDGET_SELECTION_COLOR = new FColor
			MENU_WIDGET_SELECTION_COLOR.setColorValue(color)
		}
		__menu_selection_color(WIDGETPOINTER,MENU_WIDGET_SELECTION_COLOR.getColor())
		notifyWidget()
		return this
		
	#This block function is same as @Block setSelectionColor(color)
	block setDownColor(color) return setSelectionColor(color)
	
	#Get the color of the menu when it is selected
	#@Return the selection color @DataType STRING
	block getSelectionColor()
		return MENU_WIDGET_SELECTION_COLOR
		
	#this block is same as @Block getSelectionColor()
	block getDownColor()
		return MENU_WIDGET_SELECTION_COLOR
	
	#Change the type of @Class FBox that is rendered when the @Class FMenu
	#is click or selected. This block provide option to customize the 
	#widget further example when creating a @Link Material type of widget
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setDownBox(type)
		__menu_down_box(WIDGETPOINTER,type)
		return setSelectionColor(getSelectionColor())
		
	#This block is same as @Block setDownBox(type)	
	block setDownBoxType() return setDownBox(type)
	
	#This block is same as @Block setDownBox(type) arkward 	@Removable
	block setBackgroundBoxType() return setDownBox(type)
	
	#Find a @Class FmenuItem widget from the list of the added menu item 
	#in the @Class FMenu widget note if the menu item sent as parameter is
	#not a child of this widget then the first @Class FMenuItem is returned
	#@Return the corresponding @Class FMenuItem widget @DataType 
	#@Class FMenuItem
	block findMenu(menuitem) menuItemIndex = 0
		if (isString(menuitem)) 
			for a = 0 to lengthOf(MENU_WIDGET_MENUITEMS_LIST_VALUE)
				if (MENU_WIDGET_MENUITEMS_LIST_VALUE[a] == menuitem)
					menuItemIndex = a
					break
				end
			end 
		else
			
		end 
		ret = MENU_WIDGET_MENUITEMS_LIST[menuItemIndex]
		return ret
		
	#this is junk do not use this block in actual project for development
	#purpose only
	block setCallbackForAllmenuItems(callback)
		for a = 0 to lengthOf(MENU_WIDGET_MENUITEMS_LIST)
			MENU_WIDGET_MENUITEMS_LIST[a].callback(callback)
		end
		
	#Make the shortcuts for all the @Class FMenuItem in the instance of the
	#@Class FMenu works from any where in the window regardless of which
	#widget has the focus
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block global()
		__menu_global(WIDGETPOINTER)
		return this
		
	#same as the @Block global()
	block makeShortcutGlobal() return global()
	
	#Insert a new @Class FMenuItem at the specified index this block
	#accept two parameter he index and the menuitem, the menuitem parameter
	#can be n instance of @DataType STRING, @Class FMenuItem or \
	#@DataType LIST that contains list of menuitem and string or menuitem or
	#string. It is save to add a menu item with this block than the 
	#@Block insetRawItemAt(index,value) which as no regard for parameter
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block insertMenuItemAt(index,menuitem)
		if (isString(menuitem))
			tempMenuItem = new FMenuItem(menuitem)
			insetRawItemAt(index,tempMenuItem.getValue())
			add(MENU_WIDGET_MENUITEMS_LIST,tempMenuItem)
		elif (isList(menuitem))
			for a = 0 to lengthOf(menuitem)
				insertMenuItemAt(index+1,menuitem[a])
			end
		else 
			insetRawItemAt(index,menuitem.getValue())
			add(MENU_WIDGET_MENUITEMS_LIST,menuitem)
		end
		return this
	
	#insert an item with a custom value at the specified index
	#@Note adding item at index will disrupt the indexing by @DataType NUMBER
	#and the only accurate way to get item in the list is using the 
	#value of the @MenuItem
	block insetRawItemAt(index,value)
		__menu_insert(WIDGETPOINTER,index,value)
		add(MENU_WIDGET_MENUITEMS_LIST_VALUE,value)
		notifyWidget()
		
	#Get the last selected @Class FMenuItem in the instance of the @Class 
	#FMenu. this block is most useful if all the @Class FMenuItem are using
	#the same @Link callback then the function can be determined in the 
	#@Link Block by checking the name of the selected @Class FMenuItem
	#@Return the last selected @Class FMenuItem value @DataType STRING
	block lastSelectedMenuItemValue() return __menu_selected_menu_item_value(WIDGETPOINTER)
	
	#Change the mode/flag of the @Class FMenuItem at the specified index. 
	#This block accept two parameter the first been the index number of the 
	#@Class FMenuItem and the second is the mode which is of the @DataType
	#NUMBER or one of the flags in the @Class FMenuType
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block mode(index,mode)
		__menu_mode(WIDGETPOINTER,index,mode)
		notifyWidget()
		return this
		
	#this block is same as @Block mode(index,mode)	
	block setModeAt(index,mode) return mode(index,mode)
	
	#Get the mode/flag of the @Class FMenuItem at the index passed as 
	#parameter
	#@Return the mode at the index @DataType NUMBER
	block getModeAt(index) return __menu_mode(WIDGETPOINTER,index,-101)
	
	#currently failing
	block getLastSelectedItem()
		index = 0
		for a = 0 to lengthOf(MENU_WIDGET_MENUITEMS_LIST)
			val = MENU_WIDGET_MENUITEMS_LIST[a].getWidgetPointer()+""
			internal = __menu_last_selected_menu_item(WIDGETPOINTER)+""
			#if (val == internal)
			#	display MENU_WIDGET_MENUITEMS_LIST[a].getValue()
			#end
		end
		return MENU_WIDGET_MENUITEMS_LIST[index]
		
	#Fetch the correct pointer of the last selected item in the 
	#@Class FMenu this only return the low level @Link pointer only, to 
	#to get the last selected @Class FMenuItem call 
	#@Block getLastSelectedItem()
	#@Return the last selected item pointer @DataType POINTER
	block getLastSelectedItemPointer()
		return __menu_last_selected_menu_item(WIDGETPOINTER)
		
	#Remove the @Class FMenuItem at the specified index location
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block remove(index)
		__menu_remove(WIDGETPOINTER,index)
		return this
		
	#Change the value of the @Class FMenuItem at the provided index 	
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block replaceValueAt(index,value)
		__menu_replace(WIDGETPOINTER,index,value)
		return this
		
	block setonly(menuitem)
		__menu_setonly(WIDGETPOINTER, menuitem.getWidgetPointer())
		return this
		
	#all the private attributes, fields and block not accessible outside
	#the class
	private 
	
		/* STRING */
		SUBMENU_LIST_INDEX = 2 #the index at which the submenu child menu are
		
		/* LISt */
		MENU_WIDGET_MENUITEMS_LIST = []
		MENU_WIDGET_MENUITEMS_LIST_VALUE = []

		#This block check a menu item is a submenu and also change the
		#@Attribute SUBMENU_LIST_INDEX to the index of the submenu at which
		#the other sub menu items are located
		#@Note this block is not meant to be called from outside the @Class
		#FMenu o prevent error during runtime
		block containsChildMenus(submenu)
			if (lengthOf(submenu) > 2 && isList(submenu[3])) SUBMENU_LIST_INDEX = 3 return true
			elif (lengthOf(submenu) > 1 && isList(submenu[2])) SUBMENU_LIST_INDEX = 2 return true
			elif (lengthOf(submenu) > 0 && isList(submenu[1])) SUBMENU_LIST_INDEX = 1 return true
			end
			return false
	
		#We don't work to use the @Attribute SUBMENU_LIST_INDEX directly 
		#@Hint usage from block is safe so if the attribute is to be 
		#treated or formated in future it wont break code
		block getSubmenuListIndex()
			return SUBMENU_LIST_INDEX
			
		#Any @Class FMenuItem added to an instance the @Class FMenu if the  
		#parent is a submenu then the value of the widget will have to be 
		#relative to the parent submenu to ensure the menu is added in the proper
		#hierarchy
		#@Return the submenu with formated value @DataType LIST
		block treatMenu(submenu, parentitem)
			for a = 0 to lengthOf(submenu) submenu[a][1] = parentitem.getValue()+"/"+submenu[a][1] end
			return submenu
			
		#After the @Class FMenuItem widget has been added to an instance of
		#of the @Class FMenu then the @Attribute WIDGETPOINTER has to be 
		#initialize to enable properties set on the @Class FMenuItem to be
		#effective
		block assignMenuItemPointer(menuitem)
			menuitem.setValue(voidMenuItemParam(menuitem.getValue())) 
			menuitemPointer = __menu_find_menu_item(WIDGETPOINTER,menuitem.getValue())
			menuitem.setWidgetPointer(menuitemPointer) 
			
		#remove the parameter passed through the @Class FMenuItem widget
		#value such as the _ \ \' & which will cause finding the item in the 
		#@Class FMenu fail if not removed
		#@Return the formated value @DataType STRING
		block voidMenuItemParam(value)
			value = substr(value,"_","") value = substr(value,"\'","") 
			value = substr(value,'\',"") value = substr(value,"&","") 
			return value
		
		