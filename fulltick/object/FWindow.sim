/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - FWindow.sim
 * #author - Azeez Adewale
 * #date - 19 Febuary 2017
 */
module fulltick.object

call "fulltick/core/FWidget.sim" ? fulltick.core

class FWindow : FWidget

	#initialize the Window object with zero width and height.
	block FWindow()
		initialize()
		
	#Show the window object. This block is useful if you will be creating a 
	#custom event loop to hold the window because calling this block will
	#just pop the object up. It is very useful if you are having more than 
	#one window to display at once before calling the @Block run() from the
	#@Class QApp. otherwise you should call the @Block run() which
	#call the event loop in the @Module [[link][FLTK]["http://www.fltk.org"]]
	#to display the object
	block show()
		__show_window(OBJECTPOINTER)
		
	#This Display the object and wait the dispose/exit command from the
	#object to get dispose it. It calls @Block show() which prepare the 
	#the window object, parent and child then add it to the event loop
	block run()
		show()
		__run_fulltick()
	
	#Minimize the window to the task bar. 
	block iconize()
		__set_visibility(OBJECTPOINTER, 2)
		
	#Set the location of the window on the display screen not the addition of
	#the 28 to the Y offset. Since [[link][FLTK]["http://www.fltk.org"]] 
	#treat windows as a Fl_Widget the decorated aspect of the window is not 
	#considered. So by the default height of the decorated bar of the window
	#which is between 20 - 30 on various OS. If You are not confortable 
	#with the calculation you can choose to call the @Block setPosition(x, y)
	#on the window which does same as this block but with no regard to the 
	#window decorated bar
	block setLocation(x, y)
		__set_position(OBJECTPOINTER, x, y+28)
		return this
		
	#This block is implemented base on the abstract block in the parent
	#@Class FWidget. This block is used to update the widget when a new 
	#property is called it then notify this block which do all other 
	#neccessary things on the widget
	block notifyObject()
		
		
	#all the private attributes, fields and block not accessible outside
	#the class
	private 
		
		block initialize()
			OBJECTPOINTER = __init_window(OBJECT_WIDTH, OBJECT_HEIGHT, OBJECT_TITLE, OBJECT_ISRESIZABLE)
			
		
			
			
			
			
			
			