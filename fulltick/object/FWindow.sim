/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - FWindow.sim
 * #author - Azeez Adewale
 * #date - 19 Febuary 2017
 */
module fulltick.widget

#call the @Class FWidget File for general widget blocks inheritance
call "fulltick/core/FWidget.sim" ? fulltick.core

#The @Class [[link][FWindow]["github:fwindow"]] is a child class inheriting
#Most of it blocks from the @Class [[link][FWidget]["github:fwidget"]]
#some block are available only for this widget. The Widget is use to draw
#Window Object directly on the Computer Display @Skip
#  ___________   _________________________________________
# |___________| |####|                     |    | __ |    |
# |           | |#@@#|                     | __ ||__||  X |
# |           | |####|_____________________|____|____|____|
# |___________| |                                         |
#               |                                         |
#               |                                         |
# @EndSkip
#The FWindow instance can be call as much time as possible and @Block show()
#can be called to add it to FApp stack or @Block run() to display the window
class FWindow : FWidget

	WIDGET_TYPE = "WINDOW"

	#initialize the FWindow Widget with zero width and height.
	block FWindow()
		initialize()
		
	#Show the window widget. This block is useful if you will be creating a 
	#custom event loop to hold the window because calling this block will
	#just pop the widget up. It is very useful if you are having more than 
	#one window to display at once before calling the @Block run() from the
	#@Class QApp. otherwise you should call the @Block run() which
	#call the event loop in @Module [[link][FLTK]["http://www.fltk.org"]]
	#to display the widget
	block show()
		__show_window(WIDGETPOINTER)
		
	#This Display the widget and wait the dispose/exit command from the
	#widget to get dispose it. It calls @Block show() which prepare the 
	#the window widget, parent and child then add it to the event loop
	block run()
		show()
		__run_fulltick()
	
	#Minimize the window to the task bar. 
	block iconize()
		__set_visibility(WIDGETPOINTER, 2)
		
	#Set the location of the window on the display screen not the addition of
	#the 28 to the Y offset. Since [[link][FLTK]["http://www.fltk.org"]] 
	#treat windows as a Fl_Widget the decorated aspect of the window is not 
	#considered. So by the default height of the decorated bar of the window
	#which is between 20 - 30 on various OS. If You are not confortable 
	#with the calculation you can choose to call the @Block setPosition(x, y)
	#on the window which does same as this block but with no regard to the 
	#window decorated bar
	block setLocation(x, y)
		__set_position(WIDGETPOINTER, x, y+28)
		return this
		
	#This block is implemented base on the abstract block in the parent
	#@Class FWidget. This block is used to update the widget when a new 
	#property is called it then notify this block which do all other 
	#necessary things on the widget
	block notifyObject()
	
	#Make the FWindow Object Full screen in which it occupies the entire
	#Computer display space and with no border. So There must be a way to
	#exit the window as the exit button in the decoration bar/border is 
	#visible
	#@Note useful for creating full screen required app/games
	block setFullscreen(condition)
		__full_screen(WIDGETPOINTER, condition)
		return this
	
	#Toggle between the window Decoration bar/border visibility 
	block setBorderVisibility(condition)
		__set_window_border(WIDGETPOINTER, condition)
		return this
		
	#currently failing	
	block setIcon(path)
		#display "to create rc for : "+path
		__set_window_icon(WIDGETPOINTER, 101)
		return this
		
	block setTitle(title)
		setLabel(title)
		return this
		
	#all the private attributes, fields and block not accessible outside
	#the class
	private 
		
		#Create an instance of the FWindow Widget with Object Width and 
		#Height, Title and set window resizability
		block initialize()
			WIDGETPOINTER = __init_window(WIDGET_WIDTH, WIDGET_HEIGHT, WIDGET_TITLE, WIDGET_ISRESIZABLE)
			
		
			
			
			
			
			
			