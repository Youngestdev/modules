/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 SIMPLE 

*/

/* 
 * @Filename - FWidget.sim
 * @Author - Azeez Adewale
 * @Date - 19 Febuary 2018
 * @Time - 01:21 AM
 */

module fulltick.core

#@Call the GUI(fulltick) Dynamic Module which is a port from the C++ Based
#Library [[link][FLTK]["http://www.fltk.org"]] from the core file 
#@File Core.sim
#@Call the FColor class to use the FColor fields for widget color
#attributes
#@Call the Hash class to use the @Block hash(content) to calculate the hash
#of the widget
call "Core.sim"
call "fulltick/painting/FColor.sim" ? fulltick.painting
call "fulltick/drawing/FFont.sim" ? fulltick.painting
call "simple/security/Hash.sim" ? simple.security

#All the GUI widget base class. Some of the block in this class are abstract 
#i.e they are not declared here so it has to be declared in the child widget 
#class to avoid runtime error.
#@Note the class use the dynamic module 'fulltick.dll' loaded in the 
#@File Core.sim 
class FWidget

	/* POINTERS AND CLASSES */
	PARENT_WIDGETPOINTER = null #initialize the parent widget with null
	WIDGETPOINTER = null #initialize the widget pointer to null
	WIDGET_BACKGROUND_COLOR = null #The default background color is 
	#inherited from the [[link][FLTK]["http://www.fltk.org"]] Library
	WIDGET_LABEL_COLOR = new FColor #The default label color is 
	#inherited from the [[link][FLTK]["http://www.fltk.org"]] Library
	WIDGET_FONT = new FFont #The font contains no attribute 
	
	/* NUMBERS */
	WIDGET_HEIGHT = 0 #The widget Height
	WIDGET_WIDTH = 0 #The widget Width
	WIDGET_X = 0 #The widget X axis/position
	WIDGET_Y = 0 #The widget Y axis/position
	WIDGET_LABEL_SIZE = 10 #Initialize the default label size 
	WIDGET_LABEL_FONT = FFONT_HELVETICA #The default label font
	WIDGET_LABEL_TYPE = FLABEL_TYPE_NORMAL_LABEL #Initialize the default label type
	
	/* STRINGS */
	WIDGET_TYPE = "WIDGET" #Declare the type of widget. This is assumed to 
	#be abstract and is to be implemented/declared in all inheriting classes
	WIDGET_TITLE = "Simple Fulltick" #The default title for all objects
	WIDGET_TOOLTIP = "" #The widget tooltip
	WIDGET_LABEL = "" #The label attribute of the widget
	
	/* BOOLEAN */
	WIDGET_ISRESIZABLE = false #The boolean value indicating if widget can resize
	WIDGET_VISIBILITY = true #The boolean value indicating the widget visibility
	WIDGET_HAS_PARENT = false #The boolean value that is true if the current widget is a child of another widget or has a parenting widget
	
	/* LIST */
	WIDGET_CHILDREN = [] #The list that holds all the added sub widgets
	
	#Set the size for all the widget that inherited this class @FWidget and
	#ensure to pass only Numbers data type as parameters for the w and h 
	#the @Block notifyWidget() called within this block is abstract and has 
	#to be implemented/declared in the corresponding inheriting class
	#@Note It @Returns this which is the widget to allow the inline usage 
	#of the widget
	block setSize(w, h)
		WIDGET_WIDTH = w
		WIDGET_HEIGHT = h
		__set_size(WIDGETPOINTER, WIDGET_WIDTH, WIDGET_HEIGHT)
		redrawParent()
		notifyWidget()
		return this
	
	#Get the width value of the widget @Return widget width 
	#@DataType Number
	block getWidth()
		return WIDGET_WIDTH
	
	#Get the height value of the widget @Return widget height 
	#@DataType Number
	block getHeigth()
		return WIDGET_HEIGHT
		
	#Change the label value for the widget inheriting this class. Don'that
	#forget to implement/declare the @Block notifyWidget() in the inheriting 
	#class to treat all newly set data, fields and attributed
	#@Note It @Returns this which is the widget to allow the inline usage 
	#of the widget
	block setLabel(label)
		WIDGET_LABEL = label
		__set_label(WIDGETPOINTER, WIDGET_LABEL)
		redrawParent() notifyWidget()
		return this
		
	#Get the current label value of the Widget @Return widget label 
	#@DataType String
	block getLabel()
		return WIDGET_LABEL
		
	#Change the size of the label for the current widget. This block does 
	#not execute on all type of widget for example calling this block
	#on a @Class FWindow id meaningless as the label is used to set the 
	#decorated bar title
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setLabelSize(size)
		WIDGET_LABEL_SIZE = size
		__set_label_size(WIDGETPOINTER, WIDGET_LABEL_SIZE)
		return this
		
	#Get the current label size of the widget @Returns widget label size @DataType Number
	block getLabelSize()
		return WIDGET_LABEL_SIZE
	
	#Change the font type of the widget label, the only valid parameter
	#is any font declared in the @Class FFont. This block should not be 
	#mistaken for the @Block setFont(font) which accept the @Class FFont 
	#as it own parameter
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setLabelFont(font)
		WIDGET_LABEL_FONT = font
		__set_label_font(WIDGETPOINTER, WIDGET_LABEL_FONT)
		return this
		
	#Get the current label font of the widget @Returns widget label font @DataType Number
	block getLabelFont()
		return WIDGET_LABEL_FONT
	
	#Use this block to set the type of label. Types of label can be found
	#in the @Class FFont 
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setLabelType(type)
		WIDGET_LABEL_TYPE = type
		__set_label_type(WIDGETPOINTER, WIDGET_LABEL_TYPE)
		return this
		
	#Get the current label type of the widget @Returns widget label 
	#type @DataType Number
	block getLabelType()
		return WIDGET_LABEL_TYPE
		
	#Change the label color of the widget. Color is of @DataType Number
	#The @Class FColor can be passed as parameter to the block which get the 
	#color value from the @Class FColor or Integer/Number can be passed 
	#directly 
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setLabelColor(color)
		try {
			color.getColor() WIDGET_LABEL_COLOR = color
		catch
			WIDGET_LABEL_COLOR = new FColor
			WIDGET_LABEL_COLOR.setColorValue(color)
		}
		__set_label_color(WIDGETPOINTER, WIDGET_LABEL_COLOR.getColor())
		return this
		
	#Get the current label color of the widget 
	#@Returns widget label color in form of the @Class FColor to support 
	#and allow more color usage
	block getLabelColor()
		return WIDGET_LABEL_COLOR
	
	#Use the @Class FFont to set all the attributes of the widget label 
	#which include the color, label, size, type and font if one of the
	#attributes is not set in the @Class FFont parameter sent to this block 
	#then the attribute will be ignored.
	#@Note It @Returns this which is the widget to allow the inline usage 
	#of the widget
	block setFont(font)
		WIDGET_FONT = font
		if WIDGET_FONT.getFont() != null
			setLabelFont(WIDGET_FONT.getFont())
		end
		if WIDGET_FONT.getSize() != null
			setLabelSize(WIDGET_FONT.getSize())
		end		
		if WIDGET_FONT.getColor() != null
			setLabelColor(WIDGET_FONT.getColor())
		end
		if WIDGET_FONT.getType() != null
			setLabelType(WIDGET_FONT.getType())
		end
		return this
		
	#Get the current widget font 
	#@Returns widget widget font in form of the @Class FFont to support 
	#and allow more font usage
	block getFont()
		return WIDGET_FONT
		
	#Forcefully set the realizability of widget to true. Note this is 
	#unsafe as it give no regard to other widget data instead use the
	#@Block resizable(condition) to safely set realizability of widget
	#@Note It @Returns this which is the widget to allow the inline usage 
	#of the widget
	block objectResizable()
		WIDGET_ISRESIZABLE = true
		__resizable(WIDGETPOINTER)
		redrawParent() notifyWidget()
		return this
		
	#Make a widget realizability to custom boolean and notify the widget to
	#treat the new data this is safer than using @Block objectResizable() 
	#which forcefully set the widget realizability without regard to other 
	#objcet data
	#@Note It @Returns this which is the widget to allow the inline usage 
	#of the widget
	block resizable(condition)
		WIDGET_ISRESIZABLE = condition
		__resizable(WIDGETPOINTER)
		redrawParent() notifyWidget()
		return this
		
	#Get the realizability condition of a widget. Check whether the widget 
	#is re sizable @Return widget realizability @DataType boolean
	block isResisable()
		return WIDGET_ISRESIZABLE
	
	#Change the background color of the widget. Color is of @DataType Number
	#The @Class FColor can be passed as parameter to the block which get the 
	#color value from the @Class FColor or Integer/Number can be passed 
	#directly 
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setBackground(color)
		try {
			color.getColor() WIDGET_BACKGROUND_COLOR = color
		catch
			WIDGET_BACKGROUND_COLOR = new FColor
			WIDGET_BACKGROUND_COLOR.setColorValue(color)
		}
		__set_bg(WIDGETPOINTER, WIDGET_BACKGROUND_COLOR.getColor())
		return this
		
	#Get the background color of the widget 
	#@Returns widget background color in form of the @Class FColor to 
	#support and allow more color usage
	block getBackgroundColor()
		return WIDGET_BACKGROUND_COLOR
	
	#Set the tooltip value for the widget this accept @DataType String as 
	#parameter 
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setTooltip(tip)
		WIDGET_TOOLTIP = tip
		__set_tooltip(WIDGETPOINTER, WIDGET_TOOLTIP)
		redrawParent() notifyWidget()
		return this
	
	#Get the current tool-tip value of the Widget @Return widget tool-tip
	#@DataType String
	block getTooltip()
		return WIDGET_TOOLTIP
	
	#Change the visibility of the widget to either visible/show or invisible/
	#hide. The block accept @DataType Boolean as parameter in which 
	#[[color][true][blue]] translate to visible and [[color][false][blue]]
	#translate to invisible
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setVisibility(condition)
		WIDGET_VISIBILITY = condition
		__set_visibility(WIDGETPOINTER, condition)
		redrawParent() notifyWidget()
		return this
	
	#Get the current widget visibility @Return widget visibility
	#@DataType String
	block isVisible()
		return WIDGET_VISIBILITY
	
	#Work same as the @Block callback(cb) used to fire the default event 
	#that occur when the state of the widget changes
	block onClick(cb)
		__on_click(WIDGETPOINTER, cb) 
	
	#Change the position of the widget on the parent widget or modal location
	#it is a raw block and does not give regard to some widget features
	#such as the decorated bar of the @Class FWindow widget
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block setPosition(x, y)
		__set_position(WIDGETPOINTER, x, y)
		redrawParent() notifyWidget()
		return this
		
	#Add a child widget to the current widget. The widget can be added 
	#individually, in a list or in one of the FGroup family. Only valid 
	#FWidget should be sent to this block as parameter to avoid error 
	#during runtime
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block addWidget(widget)
		#isList()
		try 
			addChildWidget(widget, false)
		catch
			for a = 0 to lengthOf(widget) 
				addChildWidget(widget[a], false)
			end
		end
		return this
	
	#Add a child or some child widget to the current widget along with 
	#inheriting the parent resize attribute i.e It also resize if the
	#current widget is resized of change size if you want it static you
	#can choose to call @Block addWidget(widget) instead or set the parent
	#size to not re-sizable
	#@Note It @Returns this which is the widget to allow the in-line usage 
	#of the widget
	block addResizableWidget(widget)
		try 
			addChildWidget(widget, true)
		catch
			for a = 0 to lengthOf(widget) 
				addChildWidget(widget[a], true)
			end
		end
		return this
	
	#Get the WidgetPointer that can be passed to another program e.g
	#[[link][C/C++ Program]["documentation:extending_with_c_cpp"]]
	#@Note you should only call this block if you know what  you are doing
	#else you might break your program
	block getWidgetPointer()
		return WIDGETPOINTER
	
	#Get all the sub widget that has been added to this widget 
	#@Returns sub widget @DataType List 
	block getWidgetChildren()
		return WIDGET_CHILDREN
	
	#Get all the sub widget that has been added to this widget 
	#@Returns sub widget @DataType List
	block getAddedWidgets()
		return WIDGET_CHILDREN
	
	#Use it to get the type of the current widget, Useful for comparison 
	#@Returns widget type @DataType String
	block getType()
		return WIDGET_TYPE
		
	#Get the string value of the widget which is some of the notable 
	#attributes of the widget 
	#@Returns widget string value @DataType String
	block toString()
		return "["+WIDGET_TYPE+"["+WIDGET_WIDTH+":"+WIDGET_HEIGHT+"]["+WIDGET_X+":"+WIDGET_Y+"]"+"]"
	
	#Get the calculated hash of this class/object 
	#@Returns object hash @DataType Numbers
	block getHash()
		return hash(WIDGET_TYPE)
		
	block hasParent()
		if WIDGET_HAS_PARENT 
			return true
		else 
			return false 
		end
		
	block setParent(parent)
		WIDGET_HAS_PARENT = true
		PARENT_WIDGETPOINTER = parent
		
	block getParentPointer()
		return PARENT_WIDGETPOINTER
		
	block getTrueParentPointer()
		return __get_parent_widget(WIDGETPOINTER)
		
	block getParent()
		nwp = new FWidget
		nwp.setWidgetPointer(getParentPointer())
		return nwp 
		
	block getTrueParent()
		nwp = new FWidget
		nwp.setWidgetPointer(getTrueParentPointer())
		return nwp 
		
	block setWidgetPointer(pointer)
		WIDGETPOINTER = pointer
		
	block redraw()
		try __redraw_widget(WIDGETPOINTER) catch end
		
	block redrawParent()
		if hasParent() __redraw_widget_parent(WIDGETPOINTER) end
		
	block forceRedrawParent()
		__redraw_widget_parent(WIDGETPOINTER)
	
	#all the private attributes, fields and block not accessible outside
	#the class
	private 
		
		#This block is abstract and has to be implemented in inheriting child
		#class to notify the Widget/Widget/Class of changes to the widget
		#@Note this block should be kept empty at all time to avoid BUGS
		#and unwanted implementations
		block notifyWidget()
		
		block addChildWidget(widget, condition)
			__add_widget(WIDGETPOINTER, widget.getWidgetPointer(), condition)
			add(WIDGET_CHILDREN, widget)
			widget.setParent(this)
	
	
	
	
	
	
	
	
	
		
		