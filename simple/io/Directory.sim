/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Directory.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */
 
module simple.io

call "Path.sim"

block mkdir(path)
	__mkdir(path)

class Directory

	block Directory(path)
		if isPath(path)
			directoryPath = path.toString()
		else 
			directoryPath = path
			rawDirectoryPath = path
		end
		directoryPath = curePathSlashes(directoryPath)
		directoryName = formatDirectoryName(directoryPath)
		
	block create()
		ensureParent()
		display mkdir(directoryPath)
		
	block explode()
		return blow_dir(directoryPath)
		
	block listFiles()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if !eDir[a][2]
				nFile = new File(directoryPath+"/"+eDir[a][1])
				add(filesList, nFile)
			end
		end
		return filesList
		
	block listDirectories()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if eDir[a][2]
				nDir = new Directory(directoryPath+"/"+eDir[a][1])
				add(folderList, nDir)
			end
		end
		return folderList
		
	block isDirectory()
		if (rawExists() == 1)
			return true
		end
		return false
		
	block isFile()
		if (rawExists() == 0)
			return true
		end
		return false
		
	block exists()
		if (rawExists() == 1) 
			return true
		end
		return false
		
	#This block confirms if the path is a directory it return 
	#@DataType TRUE	(1) if it is a directory and return @DataType FALSE (0)
	#if it is not a directory on other cases of other return number 
	#-1 means it does not exist at all
	#-2 means the error is unknown (uncommon) 	
	#In this block trailing '/' or '\' are completely striped off (untreated)
	block rawExists()
		while (stringEndsWith(directoryPath,'/') || stringEndsWith(directoryPath,'\')) 
				directoryPath = removeStringAt(directoryPath, lengthOf(directoryPath)) end
		return __dir_exists(directoryPath)
		
	block toPath()
		return new Path(directoryPath)
		
	block getPath()
		return directoryPath
		
	block toString()
		return rawDirectoryPath
		
	block parent()
		tRemove = lastStringAfterChar(directoryPath, "/")
		return new Directory(removeString(directoryPath, "/"+tRemove))
		
	block addChild(dir)
		add(childrenToCreate, dir) 
		
	block getPendinChildern()
		return childrenToCreate
		
	block getName()
		return directoryName
		
	block formatDirectoryName(dir)
		while (stringEndsWith(dir,'/') || stringEndsWith(dir,'\')) 
			dir = removeStringAt(dir, lengthOf(dir)) end
		dName = lastStringAfterChar(dir, '\')
		return dName 
	
	private
		directoryPath = ""
		rawDirectoryPath = ""
		directoryName = ""
		filesList = []
		folderList = []
		childrenToCreate = []
		
		block ensureParent() 
			dir = removeString(directoryPath,lastStringAfterChar(directoryPath, '\'))
			pd = new Directory(dir) pd.addChild(directoryPath)
			if (!pd.exists()) pd.create() else mkdir(pd.getPendinChildern()[0]) end
		
		
		