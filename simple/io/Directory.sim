/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Directory.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */
 
module simple.io

call "Path.sim"

block mkdir(path)
	__mkdir(path)

class Directory

	block Directory(path)
		if isPath(path)
			directoryPath = path.toString()
		else 
			directoryPath = path
		end
		directoryPath = curePathSlashes(directoryPath)
		
	block create()
		mkdir(directoryPath)
		
	block explode()
		return blow_dir(directoryPath)
		
	block listFiles()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if !eDir[a][2]
				nFile = new File(directoryPath+"/"+eDir[a][1])
				add(filesList, nFile)
			end
		end
		return filesList
		
	block listDirectories()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if eDir[a][2]
				nDir = new Directory(directoryPath+"/"+eDir[a][1])
				add(folderList, nDir)
			end
		end
		return folderList
		
	block isDirectory()
		if (exists() == 1)
			return true
		end
		return false
		
	block isFile()
		if (exists() == 0)
			return true
		end
		return false
		
	block exists()
		if (exists() == 1) 
		
		end
		return false
		
	#This block confirms if the path is a directory it return 
	#@DataType TRUE	(1) if it is a directory and return @DataType FALSE (0)
	#if it is not a directory on other cases of other return number 
	#-1 means it does not exist at all
	#-2 means the error is unknown (uncommon) 	
	block rawExists()
		return __dir_exists(directoryPath)
		
	block toPath()
		return new Path(directoryPath)
		
	block toString()
		return directoryPath
		
	block parent()
		tRemove = lastStringAfterChar(directoryPath, "/")
		return new Directory(removeString(directoryPath, "/"+tRemove))
	
	private
		directoryPath = ""
		filesList = []
		folderList = []