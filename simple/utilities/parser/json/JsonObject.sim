/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * @filename - JsonObject.sim
 * @author - Azeez Adewale
 * @date - 26 Febuary 2017
 * @Time - 08:04 pM
 */

call "simple/utilities/parser/json/JsonParser.sim"

class JsonObject : JsonParser

	#Initialize the constructor with the string to parse.
	#Alternatively the class can be intantiated without the constructor
	#but the content has to specified with the 
	#@Block setContent(content) mean while both blocks calls the 
	#initJson() which intantiate the @Field JSONPOINTER
	block JsonObject(content)
		JSON_CONTENT = content
		initObject()
	
	#Get the type of the object in the @DataType NUMBER value
	block getObjectType()
		return __json_c_object_get_type(JSONPOINTER)
	
	#Get the type of object in the @DataType String value by passing
	#the @Block getObjectType() to the @LowLevelFuction #__json_c_type_to_name(value) which then returns the @DataType 
	#STRING value of the corresponding @Class JsonObject 
	block getObjectTypeName()
		return __json_c_type_to_name(getObjectType())
		
	#get the child object with the string value this @Block 
	#getChildObject(id) returns an instance of the @Class JsonObject
	block getChildObject(id)
		JSON_CHILD_POINTER = __json_c_object_object_get(JSONPOINTER, id)
		newJsonObject = new JsonObject
		newJsonObject.setPointer(JSON_CHILD_POINTER)
		return newJsonObject
		
	#Get the content of a child object in a parent object without creating a 
	#a new instance of the Object
	#@Return content of child object @DataType STRING
	block getChildObjectContent(id)
		return getChildObject(id).getContent()
		
	#This block get the content of the JSON object and return it as string 
	#no matter the type of content be it string, int, big int, boolean 
	#or any other it just return it as string
	#@Return content of object @DataType STRING
	block getContent()
		return __json_c_object_to_json_string(JSONPOINTER)
	
	#If you are certain your object content is @DataType STRING you can use
	#this block to get the content. The edge of using this is that the content
	#is returned without the "" wrap around the string. If you are not sure 
	#of the JSON object type you should call the @Block getContent() instead
	#@Return content of object @DataType STRING
	block getStringContent()
		return __json_c_object_get_string(JSONPOINTER)
		
	block getNumberContent()
		return  __json_c_object_get_number(JSONPOINTER)
	
	private 
		
		#intantiate the @Field JSONPOINTER with the content. if the 
		#content of this class changes then this block have to be 
		#called all the attributes and properties of the 
		#@Class JsonObject are freed and a new pointer is assigned
		block initObject()
			JSONPOINTER = __init_json_c(JSON_CONTENT)
		