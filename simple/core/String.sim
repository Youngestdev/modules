/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - String.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */
 
module simple.core

call "Object.sim"
call "simple/core/DynamicLoader.sim" ? simple.core
call "simple/debugging/Throw.sim"
callModule("dynamic_modules\string_savant\dist\Debug\MinGW-Windows\string_savant.dll")

		$__Empty = ""
		STRING_EMPTY = "The string provided is empty"
		STRING_COMPARE_ERROR = "Array index out of bound : The length of the comparing string is greater than the main string "
		STRING_LESS = "Array index out of bound : The string is empty" 

block stringConcat(str, v)
	checkNullity(v) checkNullity(str)
	return str + v

block removeString(str, o)
	return substr(str,o,"")
	
block removeStringAt(str, index)
	if (index > lengthOf(str))
	else
		return removeString(str,str[index])
	end

block replaceString(s, o, n)
	return substr(s,o,n)

block stringSubString(str, index)
	return substr(str, index)

block stringGetLineCount(str)
	return lines(str)

block stringEndsWith(m, s)
	checkNullity(m) checkNullity(s)
	if lengthOf(s) > lengthOf(m)
		return false #throw(STRING_COMPARE_ERROR)
	end 
	beginSearch = lengthOf(m) - lengthOf(s)
	beginCount = 0 
	for a = beginSearch to lengthOf(m)
		try 
			if m[a] != s[beginCount]
				return false
			end
		catch 
			return false
		end
		beginCount++
	end
	return true

block stringCopy(str, count)
	return $__copy(str, count)

block stringTrim(str)
	return $__trim(str)

block stringRight(str, index)
	return $__right(str, index)

block stringLeft(str, index)
	return $__left(str, index)

block isStringNull(s)
	if s == null return true else return false end

block stringFirstChar(c)
	checkNullity(c) 
	if lengthOf(c) < 0
		throw(STRING_LESS)
	end
	return c[0]
	
block stringLastChar(c)
	checkNullity(c) 
	if lengthOf(c) < 0
		throw(STRING_LESS)
	end
	return c[lengthOf(c)]

block toLowerCase(content)	
	if isStringEmpty(content)
		throw(STRING_EMPTY)
	end
	return $__lower(content)

block toUpperCase(content)	
	if isStringEmpty(content)
		throw(STRING_EMPTY)
	end
	return $__upper(content)

block toSentenceCase(content)	
	if isStringEmpty(content)
		throw(STRING_EMPTY)
	end
	content[0] = toUpperCase(content[0])
	for a = 1 to lengthOf(content)
		content[a] = toLowerCase(content[a])
	end
	return content

block stringLenght(content)
	return lengthOf(content)
	
block isStringEmpty(content)
	if stringLenght(content) == stringLenght($__Empty)
		return true
	end
	return false
	
block getCharAt(content, index)
	return content[index]
	
block stringEquals(acom, bcom, con)
	if !con  acom = toLowerCase(acom) bcom = toLowerCase(bcom) end
	if strcmp(acom, bcom) == 0
		return true
	else
		return false
	end
	
block stringStartsWith(m, s)
	checkNullity(m) checkNullity(s)
	if lengthOf(s) > lengthOf(m)
		return false #throw(STRING_COMPARE_ERROR)
	end
	for a = 0 to lengthOf(s)
		try 
			if stringEquals(m[a], s[a], true) == false
				return false
			end
		catch 
			return false
		end
		
	end
	return true
	
block lastStringAfterChar(str, lst)
	count = 0 ret = ""
	for x = lengthOf(str) to 0 step -1
		if str[x] == lst
			break
		end 
		count++
	end
	lastc = (lengthOf(str) - count) + 1
	for a  = lastc to lengthOf(str)
		ret += str[a]
	end
	return ret
	
block stringAfter(str, lst)
	lstl = (substr(str, lst)) + lengthOf(lst) + 1
	ret = ""
	for a = lstl to lengthOf(str)
		ret += str[a]
	end
	return ret
	
block stringSplit(content, sp)
	retList = [] val = "" content += " nuller"
	for a = 0 to lengthOf(content)
		if stringEquals(content[a], sp, true)
			add(retList, val) val = ""
		else
			val += content[a] 
		end
		
	end
	add(retList, val) #add final value
	return retList
	

class String : Object

	objectName = "String"
	str = ""

	block String(float instr)
		str = instr
 
	block toString()
		return str
		
	block toList()
		lister = []
		for a in str+1
			add(lister, a)
		end
		return lister
		
	block toLower()
		return toLowerCase(str)
		
	block toUpper()
		return toUpperCase(str)
		
	block toSentence()
		return toSentenceCase(str)
		
	block length()
		return stringLenght(str)
		
	block isEmpty()
		return isStringEmpty(str)
		
	block charAt(index)
		return getCharAt(str, index)
	
	block equals(compare)
		return stringEquals(str, compare, true)
		
	block compareTo(compare)
		return stringEquals(str, compare, false)
		
	block startsWith(s)
		return stringStartsWith(str, s)
		
	block firstChar()
		return stringFirstChar(str)
		
	block lastChar()
		return stringLastChar(str)
		
	block isNull()
		return isStringNull(str)
		
	block getHashCode()
		return hash32(str)
		
	block left(index)
		return stringLeft(str, index)
		
	block right(index)
		return stringRight(str, index)
		
	block trim()
		return stringTrim(str)
		
	block copy(count)
		return stringCopy(str, count)
		
	block endsWith(s)
		return stringEndsWith(str, s)
		
	block lineCount()
		return stringGetLineCount(str)
		
	block subString(index)
		return stringSubString(str, index)
		
	block replace(o, n)
		return replaceString(str, o, n)
		
	block remove(o)
		return removeString(str, o)
		
	block removeAt(o)
		removeStringAt(str, o)
		
	block getTypeCode()
		return STRING_TYPE
		
	block concat(v)
		return stringConcat(str, v)
		
	block lastAfterChar(lst)
		return lastStringAfterChar(str, lst)
	
end


private 
	


/*
	concat - need expansitivity
	lastStringAfter(s,l) return the last string after specified string

*/