/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - System.sim
 * #author - Azeez Adewale
 * #date - 9 Febuary 2017
 */
 
module simple.system

call "simple/core/String.sim" ? simple.core
call "simple/core/DynamicLoader.sim" ? simple.core
callModule("dynamic_modules\systemic\dist\Debug\MinGW-Windows\systemic.dll")		
		
MS_DOS_SYSTEM = "Microsoft Dos"
WINDOWS_SYSTEM = "Windows 32"
WINDOWS_64_SYSTEM = "Windows 64"
UNIX_SYSTEM = "Unix"
MACOSX_SYSTEM = "Mac OS X"
LINUX_SYSTEM = "Linux"
FREEBSD_SYSTEM = "Free BSD"
ANDROID_SYSTEM = "Android"
UNKNOWN_SYETEM = "Unknown System"

System = new System

block getOS()
	if isMsDos()
		return MS_DOS_SYSTEM
	elif isWindows64()
		return WINDOWS_64_SYSTEM
	elif isWindows()
		return WINDOWS_SYSTEM
	elif isUnix()
		return UNIX_SYSTEM
	elif isMacosx()
		return MACOSX_SYSTEM
	elif isLinux()
		return LINUX_SYSTEM
	elif isFreebsd()
		return FREEBSD_SYSTEM
	elif isAndroid()
		return ANDROID_SYSTEM
	else
		return UNKNOWN_SYETEM
	end
	
block getNewLine()
	if isWindows() || isWindows64()
		return windowsnl()
	else 
		return crlf
	end
	
	
block tickCount()

block exitCode()
	return 0
	
block commandLineParameters()
	return cmdparams
	
block commandLineParametersSize()
	return lengthOf(cmdparams)

block systemDirectory()
	return getSystemEnvironment("SYSTEM_DIR")
	
block systemVersion()
	return getSystemEnvironment("OSVERSION")
	
block systemUser()	
	return getSystemEnvironment("USERNAME")
	
block userHome()	
	return getSystemEnvironment("USERHOME")
	
block userDomain()	
	return getSystemEnvironment("USERDOMAIN")
	
block osGroup()
	return getSystemEnvironment("OS")
	
block machineName()
	return getSystemEnvironment("COMPUTERNAME")
	
block setSystemEnvironment(value)
	#incomming later
	
block isWindowNT()
	if stringEquals(osGroup(), "Windows_NT", true)
		return true
	end 
	return false
	
class System
	
	block exit(value)
		__exit(value)
	

	
/*
	GHOST BLOCKS
	-------------------------------
	currentDirectory() return the current working directory
	getSystemEnvironment(param) return a system env
	currentFileName() return the active simple source file
*/
	