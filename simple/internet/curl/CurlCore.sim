/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * @filename - CurlCore.sim
 * @author - Azeez Adewale
 * @date - 26 Febuary 2017
 * @Time - 11:44 AM
 */
 
module simple.internet.curl

#Call all the low level function of the @DynamicModule networker
call "simple/core/DynamicLoader.sim" ? simple.core
callModule("dynamic_modules\networker\dist\Debug\MinGW-Windows\networker.dll")

#The @Class CurlCore is the base class for all the curl module and
#classes holding mainly the parenting Blocks and the curl pointer
#for each instance of the curl classes or object initiated
#@Note if you are really the whiz type you can look into the 
#@DynamicModule networker and use all the low-level functions 
#directly from C which i believe is faster but hard but also simple 
#as it usage is similar to the [[PHP][https://php.com]] curl module 
class CurlCore

	/* TYPE */
	CURLPOINTER = null #initialize the curl pointer with null
	CURL_OUTPUT = null #Initialize the curl object output
	
	/* STRING */
	CURL_URL = "" #The url address associated with this curl object
	
	#if you are calling the constructor then you must pass the url 
	#as parameter to the constructor else after declaring an instance
	#of the @Class CurlClass you will have to call the @Block 
	#initCurl() to initialize the @Bold Curl Pointer @EndBold
	block CurlCore(url)
		initCurl() 
		CURL_URL = url
		addOption(10002, CURL_URL)
	
	#Initialize the curl pointer with the @LowLevelFunction 
	#__curl_easy_init() to create an instance of the curl object
	#all classes that are inheriting this class must call this block
	#to avoid the pointer to be initialize and avoid null error
	block initCurl()
		CURLPOINTER = __curl_easy_init()
	
	#Assign a custom pointer to the curl object. The old pointer is 
	#freed from the memory and the new pointer is assigned during the 
	#process the @Class CurlCore losses all it @Bold pointer @EndBold
	#functions and object such as curl list, headers and others and 
	#it takes all the objects and attributes of the newly assigned 
	#pointer
	block setCurlPointer(pointer)
		#garbageCollect(CURLPOINTER)
		CURLPOINTER = pointer
	
	#Set an option for the curl object. The options can range from
	#header,crumbs,data,url,file and other curl objects along with 
	#their curl option from the @File CurlOption or Integer value
	block addOption(option, value)
		try 
			a = "" + value 
			add__option(option,value)
			a = null
		catch
			for a = 0 to lengthOf(value)
				add__option(option,value[a])
			end
		end
		#use isList() later
		
	#Get the current pointer of the @Class CurlCore 
	#@Return the curl pointer @DataType POINTER
	block getCurlPointer()
		return CURLPOINTER
		
	#Once you are done with the curl object or @Class CurlCore or
	#it inheriting classes you can use the @Block flush() or 
	#@Block done() to clean up the curl pointer and objects.
	#Calling this block the @Field CURLPOINTER is null and this 
	#class is rendered finish and unusable
	block flush()
		__curl_easy_cleanup(CURLPOINTER)
		
	#This block works same as the @Block flush() 
	block done()	
		__curl_easy_cleanup(CURLPOINTER)
		
	#This block is miraculously useful if you care about how your 
	#program or app is using the memory calling this block 
	#automatically flush all child classes/object and pointers 
	#related or used along with this @Class CurlCore. The child 
	#includes @Class CurlOption, .. and related others
	#@Note you should only call this block if you are sure you want 
	#to dispose of all the associated member of this class as they
	#will all be unusable along with this class. If they are still 
	#needed they will have to be recreated
	block safeFlush()
		try 
			for a = 0 to lengthOf(CURL_CHILDREN)
				CURL_CHILDREN[a].flush()
			end
		catch end
		
	#Directly add the url to the curl object this is declare for 
	#straight forward adding url to a curl object
	block addUrl(url)
		CURL_URL = url
		addOption(10002, CURL_URL)
		
	#Get the url address associated with this cur object 
	#@Return url address @DataType STRING
	block getUrl()	
		return 
		
	block perform()
		CURL_OUTPUT = __curl_easy_perform(CURLPOINTER)
		return CURL_OUTPUT

	block stringPerform()
		CURL_OUTPUT = __curl_easy_string_perform(CURLPOINTER)
		return CURL_OUTPUT

	#Get the output gotten from executing the curl object. This 
	#return the actual @Bold object/pointer @EndBold which can be 
	#further worked on. If you prefer the string value instead you 
	#should rather call the @Block getStringOutput()
	block getOutput()
		if CURL_OUTPUT == null
			return perform()
		else
			return CURL_OUTPUT
		end
	
	#If you want to get the output as a string directly instead as 
	#pointer this block is useful but less is what you can do with
	#the string value instead for extended usage call the @Block 
	#getOutput() which return a pointer to the output
	block getStringOutput()
		if CURL_OUTPUT == null
			return stringPerform() 
		else
			return CURL_OUTPUT
		end
	
	#All the private objects,attributes and blocks exclusive to this
	#class alone are declared below
	private 	
		
		#set the curl option with value
		block add__option(option,value)
			__curl_easy_setopt(CURLPOINTER, option, value, "")
			
			
			